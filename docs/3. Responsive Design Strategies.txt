=========================================
3.1 Designing for the appropriate context
=========================================

To build a successful responsive site:
- make designing for multiple user contexts
- process and carefully consider how your site should function within those contexts

There are going to be times when a separate mobile site or application is the better choice.

Currently, many designers work like this:
- They develop a site with a client
- Test it across multiple browsers on a desktop
- As the project nears completion, spend some time thinking about how the content should look on mobile devices. 
End result: driven at this late stage by budget concerns or a site structure that doesn't lend itself to mobile devices.

You have to ensure that your design is targeting the appropriate context in which the site will be used, and that you understand those contexts well enough to make decisions when they conflict with each other.

=================================
3.2 Planning a responsive design
=================================

Things you need to consider when planning for responsive design:

1. 
Know our content - It's all about the content 

Responsive design is about to take the content strategy focus to a whole new level.
Create a content inventory and give a hieratchy - becomes easier to determine how to structure and design
- how much content the site will have
- how important that content is in relation to each other

2.
Starting with a mobile wireframe and then expanding that to a desktop version, or working on mobile and desktop wireframes simultaneously. 
- focus regarding content
- how content should be presented
- force to design in a narrow linear space 
- help to redifine what's really important
- helps to plan the initial structure of the page and how content is going to chnge across screen sizes

3.
Think about the breakpoints
First the small screen size to support and go to the largest
Ex.
480px
800px
1024px
1200px
The easiest way to do this is to plan out what your content is going to look like at both of those initial stages and then decide when room for extra columns or content regions appear. 
You're letting the expanding width to the screen dictate the flow of content.

Smaller breakpoint - tweak points, allow you to refine your designs throughout the scaling process.
--> img/tweak_points.png

4.
Device specific functionality
It's important to start thinking about when and if it's appropriate to include device-specific capabilities, like geolocation, instant messaging, and touch sensitivity.
Thinking about how the site will function within each context is just as important, if not more so, than how the layout will change and should be planned in parallel to your initial mockups.

5.
Single document structure
By considering all of these factors at the very beginning of a project, you can ask yourself a very important question: Given the goals of the site, the content involved, and the desire to user experience, can you create them all within a single document structure?  

================================
3.3 Building responsive mockups
================================

--> img/mockup_sizes.png

Mockups:
Small screen - Smartphones
Medium screen - Tablets
Large screen - Desktop

Designing in a browser
- design flexible layouts
- start with extremes
- define breakpoints and tweak points
- can be used for prototyping

http://jeremypalford.com/arch-journal/responsive-web-design-sketch-sheets

http://www.mightymeta.co.uk/responsive-web-design-sketch-sheets/

Keynote and PowerPoint
- abillity to import costum graphics
- animation capabilities

http://www.getskeleton.com/#grid

======================================================
3.4 Developing a content strategy for responsive sites
======================================================

Content strategy is extremely important to responsive design:
- identify content
- organizing content
- managing content

--> img/decreasing_columns_content_strategy.png

As small as the columns system gets its difficult to manage the information.

--> img/desktop_example.png

Goals:
- create a responsive layout that emphasizes the most important content
- makes the relationships between content clear
- and provides ways for accessing content in an efficient manner on smaller screens

1.
Start with the content: 
- Inventory the content that will appear on your pages, and begin to categorize it.
- Prioritize: page related to each other? Which content is more important? Should the content be repeated on other pages? How many categories?

Content strategists will often design diagrams of your site's content, which can help you visualize relationships, categorize it, and establish hierarchies.

Breaking your site's content into discrete chunks like this can often lead to surprising discoveries in terms of how you build pages and group content in unexpected ways. It will also help you generate a set of rules that govern how content should be displayed and shifted as screen sizes change. 

--> img/several_displays.png

Creating this content hierarchy and visualizing how it needs to change over screen sizes will make it much, much easier for you to structure your pages and write your styles.
--> img/content_hierarchy.png

====================================
3.5 Understanding the mobile context
====================================

--> img/mobile_context.png

--> img/mobile_devices.png

Mobile devices:
- screen are small: rethink how we prioritize and present content
- multiple screen sizes
- always connected
- feautures like: gps, touch events, accelerometer, phones, messaging. 

If we take these capabilities into consideration as we plan our sites, we're likely to rethink the ways that users can connect and interact with our content.

=====================================
3.6 Designing for mobile capabilities
=====================================

Some of the more prominent features of mobile devices:
- location
- accelerometer
- built in compass
- media/cameras/pictures
- touch screens
- phone
How do these features affect my content?

First step is to carefully consider whether taking advantage of these features is appropriate or not, given the goals of your site. 

How will users interact with my site?
What are my users expectations?
How do features affect my page structure and design?
How will the functionality be replaced?

Responsive design forces you to consider functionality across multiple contexts. 

To create a phone number:
- mark up the phone number in an anchor tag using the telephone URL scheme. 
- hide the link on desktops using CSS since desktop browsers don't really support it.
<a href='tel:+18005551234'>18005551234</a>

Location detection:
- involve using JavaScript APIs like geolocation
- modernizr javascript library (helps you detect support for things like geolocation and touch events, and then manages resources and scripting based on support)

Things can get much trickier if you're attempting to use native device features such as cameras or audio. Now, often these features require you to use a third-party framework to bridge that gap between the phone and your site.

==========================
3.7 Creating flexible HTML
==========================

--> img/flexible_html.png

- write clean code
- adopt HTML5
- microformats
www.microformats.org
www.schema.org
www.w3.org/TR/microdata
--> microformats.html

- standards for each content area

Creating smaller sections of content can provide you with modular content blocks that are easier to manipulate over multiple layouts.

- eassess layout goals
- scripting

http://github.com/filamentgroup/southstreet

- scripting
extraneous markup
slow page loads

CSS layout techniques are not suited for responsive design:
- Float-based layouts are directly tied to source order, making it almost impossible to dramatically reorder elements from one screen size to another.

Flexbox:
http://goo.gl/m7Lh6

Grid Template Layout Module
http://goo.gl/Ch2O2

===============================
3.8 Testing responsive designs
===============================

- Resize the browser 
- Other tools:
http://goo.gl/Pd9T2
http://responsinator.com
http://screenqueri.es
http://goo.gl/qkq1F

Mobile emulator:
It's a program that does its best to simulate a specific mobile device, browser, or operating system. 
- Test Iphone.com
- Opera mini simulator
Download and install:
- opera Mobile emulator
- Apple SDK
- Android SDK

http://goo.gl/DMLHk

Opera:
http://goo.gl/GB2WY

WebKit
http://goo.gl/UrcSp

=========================
4.9 Fluid Grid Frameworks
=========================

Fluid Grid Frameworks:
- speed up development
- helps keep consistent code
- solid starting code base
- can add unnecessary code 
- some require non-semantic code

http://www.responsivegridsystem.com

http://foundation.zurb.com

http://twitter.github.com/bootstrap/

http://html5boilerplate.com/mobile

http://www.getskeleton.com