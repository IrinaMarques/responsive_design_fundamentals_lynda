==================================
2.1 Examining the mobile viewport
==================================

How the viewport works:
iPhone 3GS - 320 x 480

First have to understand what the mobile viewport is and how it relates to the mobile screen.

When we're browsing on a desktop device, the concept of the viewport becomes a little more obvious, as any open browser window is defined as the viewport. Because the viewport is independent of the screen, we can resize it to whatever size we want. 

On mobile devices, the viewport functions in much the same way. It gives you a defined area to display web pages that is independent of the device's screen. It's simply not as obvious as the desktop viewport, and users don't actually resize the viewport as much as they scale it up or down when they zoom in and out of web pages.

Because of the small size of mobile screens, mobile viewports are designed to be larger than the screen's resolution. 

Mobile Safari has a viewport of 980 pixels. 
Opera's viewport is around 850. 

When you compare that to an iPhone with a screen width of 320 pixels, you can see that the viewport is much larger than the actual screen itself.

Typically, mobile browsers will display a web page within the viewport and then shrink that viewport down until the content fits within the width of the screen itself.

So, in order to build responsive sites that fit neatly within mobile screen sizes, you'll need to know how to control both the viewport size and its initial scale factor.

=========================
2.2 Controlling viewports
=========================

-- How to control the viewport --

Two mechanisms for overriding the user agent's default viewport.
- Viewport meta tag
- @ viewport CSS rule

Viewport meta tag:
Appears in the head of HTML
<head>
<meta name='viewport' content='width=480, initial-scale=1'>
</head>
Contain:
- name that is viewport.
- content which will contain the properties and values you wish to set for the viewport itself.

@ viewport CSS rule:
/* CSS Doxument*/
@viewport {
width: 480px;
zoom: 1;
}
- Should be placed before media queries.

-- Width of the Viewport --

<meta name='viewport' content='width 320'>
@viewport { width: 320px; }

Not all mobile screens are 320px width
If your website is using a fluid layout, you're going to want the layout to be based on the available screen width of the device and not limit the viewport to just one single size.

We can use the property value device width.
<meta name='viewport' content='width=device-width'>
@viewport { width: device-width;}
Setting this will remove any initial viewport scaling and allows you to create fluid layouts that adapt to multiple devices.

Can also set the height of the viewport, to either a specific value or by using the value device height.

-- Initial Scale --

The initial scale value for the property's content: Initial scale controls the zoom factor of your content for the initial view of the page.
Ex. initial scale is set to 2 so the content will be scaled up to 200%. 
Ex.
<meta name ='viewport' content ='width=device-width, initial scale= 2'>
@viewport {
width: device-width;
zoom: 2;
}
Control how many zoom can do in a page:
<meta name='viewport' content='width=device-width, minimum-scale=1, maximum-scale=2>
@viewport {
width: device-width;
min-zoom:1; (user can't scale down pass 100%)
max-zoom:2; (user can scale up to 200%)
}

--> http://goo.gl/FV5Pa

Best use is the <meta name='viewport'> have near universal support.

===================================
2.3 Understanding screen densities
===================================

Screen density is the number of pixels within a physical area of a screen, and newer screens are featuring higher and higher screen densities every year. 

Two type of pixels:
- Hardware pixels
- Reference pixels

--> img/hardware_pixels.png

Reference pixel - "CSS pixel"
Is a unit of measurement that establishes an optical standard for the length of a pixel and is totally independent of hardware pixels.

device-pixel-ratio - the ratio between reference pixels and hardware pixels. 

--> img/reference_pixels.png

--> http://goo.gl/5aFuY

Android uses 4 devices pixel ratios:
- low density - 0.75 screens up to 120 ppi
- medium density - 1.0 screens up to 160 ppi
- high density - 1.5 screens up to 240 ppi
- extra high density - 2.0 screens up to 230 ppi

--> img/android_pixel_ratios.png

The screen densities are important for images.
When building responsive sites, you'll need to decide whether or not you also want to supply larger images for higher-density screens. 

=================================
2.4 Designing for multiple screen
=================================

Reduce bitmap graphics.
Use vector images like SVG or CSS that way many of the scalling factors will go away.

Try to make your content as scalable as you can. 

SVG:
Often larger than bitmaps
Graphics are redrawn with each screen change

CSS:
Complex artwork is difficult
Often require non-semantic markup
Property support isn't universal

Can also use icon fonts
- easy to size
- scale automatically with your site's text
Font Squirrel
--> http://goo.gl/MZBUV

Raster graphics
The basic idea is this: if you need an image to be 100 pixels x 100 pixels, you simply create the image at the scaling factor that's appropriate for the targeted screen.
--> img/raster graphics.png

Screen-density targeting options:
- Don't target screens, but use high-res graphics where needed
- High-res graphics are larger in size
- Not all screens use the same scalling factors

Target the devices themselves, you have two main options at present:
- Targeting CSS background images, you can use media queries to target specific device-pixel-ratios.

@media screen and (device-pixel-ratio: 2) {
.highres {background: url (image_highres.jpg):
background-size: 50%; } }

- Use javascript for other images

// find the device pixel ratio
// --------
function getDevicePixelRatio( ) {
if {window.devicePixelRatio *** undefined return 1; //Assume a pixel ratio of 1.
return window.devicePixelRatio;
}
// Use devicePixelRatio as a filter to replace specific images and resize them

===============================
2.5 Understanding media queries
===============================

Media queries were created to allow designers to extend the media declarations to include various media properties when filtering style application.

Syntax:

@media [not | only] screen [and] (expression) { }
Contain a media type and one or more expressions.
This expressions contains media features, which are evaluated to determine styles applied or not.
Keywords as "and", "not", or "only" help to refine exactly when styles are applied.

media='screen and (min-width: 480px), screen and (orientation: landscape)'

Media features:
- width *
- height *
- device-width *
- device-height
- orientation
- aspect-ratio *
- device-aspect ratio
- color
- color-index *
- monochrome * 
- resolution 
- scan
- grid

* - are the ones that accepts 'min-' and 'max-' prefixes

Media queries can also be used in several different places:
- HTML
- @import to modular stylesheets
- @media in style sheets themselves

Media queries specification:
http://goo.gl/rdG8e

===========================================
2.6 Creating breakpoints with media queries
===========================================

Breakpoint indicates the moment your layout switches from one layout to another, and is usually triggered by the width of a screen. 

Most common breakpoints:

@media only screen and (max-width: 480px) { }
For mobile styles.

@media only screen and (min-width: 481px) and (max-width: 768px) { } 
For tablet styles

@media only screen and (min-width: 769px) { }
For desktop styles

--> img/common_breakpoints.png 
--> img/common_breakpoints_media_queries.png

Although device-width is also an option, width is slightly more flexible. Device-width is equal to the available pixels on the device itself, whereas width simply refers to the width of the viewport. This means that any resizing that's done to the viewport will actually trigger media queries if you're using width. Plus, there are inconsistencies in how devices report device-width, which makes width a slightly more stable choice. 

The size shouldn't be in px but in em's 
ex. 
max-width: 480px
480 / 16 (default font size) = 30 em's

To create a layout that's truly responsive, you'll need to combine these breakpoints with fluid grids.

======================
2.7 Using fluid grids
======================

One of the best ways to make sure your content works, regardless of the screens being viewed on, is to use a fluid layout so that your content can flex and resize within each of your set breakpoints.

Grid systems are a fantastic way of creating structured, properly proportioned layouts and have been used by designers for decades across multiple disciplines.

Grids are typically defined as a number of columns and gutters that are then used by the designer to establish the widths of page elements and regions.

- 16-pixel-based grid - that's the default font size for most browsers
--> img/16_pixel_grid.png

- Most popular currently is 960 pixels
--> img/grid_sizes.png

- Once the grid is established, page elements are mapped to grid coordinates and values are assigned based on where they fit within the grid. To make the grid fluid, you would simply use either relative units of measurement, like ems, or percentage values for the width of the columns and gutters. 
--> img/grid_system.png


Multiple set framework: 
- The number of columns increases as screen sizes get wider and the width of the gutters change to maintain spatial relationships at each breakpoint
- It's usually built with an array of classes that define the number of columns that an element should span, any floating or positioning requirements, and the desired padding in margin values. 
- Additional classes are used to clear floats, define containing elements, and handle any additional layout requirements.
- Once the framework is built, creating the actual layout becomes fairly simple: based on the desired layout, you simply add the appropriate classes to the appropriate page element.
--> img/grid_screens.png

Downsides of frameworks:
- class-based
- non-semantic--
- container/clearing elements
- large in size/extra code

=============================
2.8 Making images responsive
=============================

--> img/making_images_responsive.png

Problems:
- An image designed for a large desktop monitor is unlikely to fit into a layout designed for a 320-pixel-wide smartphone.
- Images designed to accompany content on a mobile screen would probably look like thumbnails when viewed within desktop layouts. 

-- Make images responsive --

1. Solution
- Replace the fixed dimensions with percentages or relative units. ( -->img/fixed_percentange_images.png). Add a max-width property avoid scaling the image past its original size.
Place the image in a flexible container  and use max-width equals to 100% property to constrain the image to the size of its container.

Ex. 
img { max-width: 100%; }

Issues:
- IE don't support for max-width
- Carefull with width and max-width (-->img/width_max-width.png)
- large images = slower download, especially for mobile

2. Solution
- If the image is purely decorative and not really necessary to the structure of the page, you could serve the image as a background image. 
Separated media queries ensuring that you're requesting only the image that you need for the proper device. Allows:
- control the image size
- control the image context

Ex.
--> img/making_background_image.png

Issues:
- Limited - only for images that don't need to be in html. 
- Older android devices - all the background images would be downloaded.

3. Solution
- Using Javascript - examine the page, determine the context and serve the appropriate image.
--> https://github.com/scottjehl/picturefill
- You just modify your .htaccess file, link to their responsive images JavaScript file, and add a query string on any image that requires a larger desktop version of that image. The script will then parse the page and replace the smaller images with the larger ones when they're appropriate.

Issues:
- more complex solution
- slower load times

=============================================
2.9 Examining the future of responsive images
=============================================

To truly have responsive images, we need to have the ability to choose which image is served to which device. We need to have the ability to make sure the right image is served to the right context.

Determinated by three factors:
- screen size
- screen density
- bandwidth

--> img/screen_density_bandwidth.png

Possible solutions:

1.
- new attribute called srcset: would allow authors to provide a comma-separated list of images and related property such as viewport width, height, and pixel density, that the user agent could then use to determine which image to use.

Benefits:
- straight forward
- uncluttered
- no new html elements backwards compatible

--> img/solution_1.png

2.
- New element <picture>.

Benefits:
- acts as a parent for range of <img> elements. Multiple source options with alternate images, images porperties, and media queries. User agentes selects matching images.

--> img/solution_2.png

This already includes the new syntax - srcset - 

Issues surrounding responsive images illustrate the fact that responsive design is a totally new approach to designing websites. And many aspects of it are still evolving.

As such, as a designer, you're going to need to pay careful attention that how techniques change and how implementations are carried out so that you're prepared to adopt them as they mature.
